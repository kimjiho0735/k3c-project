Description: users-100k
Mappings:
  Send:
    AnonymousUsage:
      Data: 'Yes'

Resources:
  # VPC 지정
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: VPC-project-k3c

  # Subnet 생성
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: "ap-northeast-2a"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: subnet-pub1-ap-northeast-2a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: "ap-northeast-2c"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: subnet-pub2-ap-northeast-2c


  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.20.0/24
      AvailabilityZone: "ap-northeast-2a"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: subnet-pri1-ap-northeast-2a

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.21.0/24
      AvailabilityZone: "ap-northeast-2c"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: subnet-pri2-ap-northeast-2c

  # 인터넷 게이트웨이
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Internet-gw
          
  # 인터넷 게이트웨이 연결
  Attachigw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  # 라우팅 테이블 생성
  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Pub-rt-igw-ac

  # 인터넷 게이트웨이 라우팅
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: Attachigw
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  # 명시적 서브넷 연결
  PublicSubnetRT1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet1
  PublicSubnetRT2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet2

  # Public 서버 보안그룹
  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow 22, 80
      GroupName: WEB-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  # ALB 보안그룹
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow 80, 443
      GroupName: ALB-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC


  # DB 보안그룹
  DBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow 3306
      GroupName: DB-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  # ElastiCache 보안그룹
  ElasticSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow 6379
      GroupName: ElastiCache-se-gr
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  # S3 bucket 생성
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: kakangkang
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled

  # S3버킷 정책 (S3)
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: kakangkang
      PolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginIdentityS3}'
          Action: s3:GetObject
          Resource: arn:aws:s3:::kakangkang/*


  # Key페어 가져오기
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: "k8s"

  # Public EC2 생성
  EC2WEB:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0fd0765afb77bcca7
      KeyName: !Ref KeyPair
      AvailabilityZone: "ap-northeast-2a"
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref EC2SG
      UserData:
        Fn::Base64:
          !Join [ "", [
          "#!/bin/bash\n",
          "#Install APM for Web Server\n",
          "yum install -y mariadb* php httpd php-mysql\n",
          "systemctl enable httpd mariadb\n",
          "systemctl start httpd mariadb\n",
          "cp /usr/share/httpd/noindex/index.html /var/www/html/index.html"] ]
      Tags:
        - Key: Name
          Value: WEB1

  EC2WEB2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0fd0765afb77bcca7
      KeyName: !Ref KeyPair
      AvailabilityZone: "ap-northeast-2c"
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref EC2SG
      UserData:
        Fn::Base64:
          !Join [ "", [
          "#!/bin/bash\n",
          "#Install APM for Web Server\n",
          "yum install -y mariadb* php httpd php-mysql\n",
          "systemctl enable httpd mariadb\n",
          "systemctl start httpd mariadb\n",
          "cp /usr/share/httpd/noindex/index.html /var/www/html/index.html"] ]
      Tags:
        - Key: Name
          Value: WEB2


  # 대상 그룹
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Name: Target-gr1
      Port: 80
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      TargetType: instance
      Targets:
        - Id: !Ref EC2WEB
        - Id: !Ref EC2WEB2


# 로드밸런서 추가
  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ELB-ac
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSG
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

# ALB 리스너 추가
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP

# SubnetGroup 생성
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DBGrouping
      DBSubnetGroupName: Subgr-pri-ac
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2


# RDS 제작
  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: mydb
      Engine: MySQL
      EngineVersion: 8.0.28
      DBInstanceIdentifier: mysql
      DBInstanceClass: db.r6g.large
      MasterUsername: 'root'
      MasterUserPassword: '223334444'
      DBSubnetGroupName: !Ref   DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSG
      AllocatedStorage: 50
      MultiAZ: True
      PubliclyAccessible: False

# Read Replica 제작
  ReadReplica1:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: ReadReplica1
      PubliclyAccessible: False
      SourceDBInstanceIdentifier: !Ref RDS
      MultiAZ: False
      AvailabilityZone: ap-northeast-2a

  ReadReplica2:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: ReadReplica2
      PubliclyAccessible: False
      SourceDBInstanceIdentifier: !Ref RDS
      MultiAZ: False
      AvailabilityZone: ap-northeast-2c

  # 시작 구성(이름은 시작 템플릿 이름으로 지정)
  LC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0fd0765afb77bcca7
      InstanceType: t2.micro
      InstanceMonitoring: true
      KeyName: "k8s"
      LaunchConfigurationName: WEB-config
      SecurityGroups:
        - !Ref EC2SG

  # 오토스케일링 그룹
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: webserverASG
      Cooldown: 10
      LaunchConfigurationName: !Ref LC
      MaxSize: 4
      MinSize: 2
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          Value: web-asg
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      
  # 오토스케일링 정책
  ASGPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 5

  # S3 OAI 제작
  CloudFrontOriginIdentityS3:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'S3 Origin Identity'

  # ALB OAI 제작
  CloudFrontOriginIdentityALB:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'ALB Origin Identity'

# CloudFront 배포
  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: kakangkang.s3.ap-northeast-2.amazonaws.com
            Id: kakangkang
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginIdentityS3}'
          - DomainName: webserveralb-1161872064.ap-northeast-2.elb.amazonaws.com # 로드밸런서 배포 후 적용
            Id: WebserverALB
            CustomOriginConfig:
              HTTPPort: '80'
              OriginProtocolPolicy: http-only
              OriginKeepaliveTimeout: 60
              OriginReadTimeout: 30
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
                - SSLv3
        Enabled: 'true'
        Comment: CloudFront
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: kakangkang
          ForwardedValues:
            QueryString: False
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          CloudFrontDefaultCertificate: True


  # ElastiCache 서브넷그룹
  ElastiCacheSubnetGroup:
        Type: "AWS::ElastiCache::SubnetGroup"
        Properties:
            Description: "ElastiCache Subnet Group"
            CacheSubnetGroupName: "ElastiCache-sub-gr"
            SubnetIds: 
              - !Ref PrivateSubnet1
              - !Ref PrivateSubnet2


# ElastiCache 클러스터 생성
  ElastiCacheCacheCluster:
        Type: "AWS::ElastiCache::CacheCluster"
        Properties:
            CacheNodeType: "cache.r6g.large"
            Engine: "redis"
            EngineVersion: "6.2"
            NumCacheNodes: 1
            PreferredAvailabilityZone: !Sub "${AWS::Region}a"
            PreferredMaintenanceWindow: "fri:05:30-fri:06:30"
            CacheParameterGroupName: "default.redis6.x"
            CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
            AutoMinorVersionUpgrade: true
            VpcSecurityGroupIds: 
              - !Ref ElasticSG
            SnapshotRetentionLimit: 0
            SnapshotWindow: "01:30-02:30"
            ClusterName: "ElastiCache1-Redis-ac1"



  ElastiCacheCacheCluster2:
        Type: "AWS::ElastiCache::CacheCluster"
        Properties:
            CacheNodeType: "cache.r6g.large"
            Engine: "redis"
            EngineVersion: "6.2"
            NumCacheNodes: 1
            PreferredAvailabilityZone: !Sub "${AWS::Region}a"
            PreferredMaintenanceWindow: "fri:05:30-fri:06:40"
            CacheParameterGroupName: "default.redis6.x"
            CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
            AutoMinorVersionUpgrade: true
            VpcSecurityGroupIds: 
              - !Ref ElasticSG
            SnapshotRetentionLimit: 0
            SnapshotWindow: "01:30-02:30"
            ClusterName: "ElastiCache1-Redis-ac2"


  ElastiCacheCacheCluster3:
        Type: "AWS::ElastiCache::CacheCluster"
        Properties:
            CacheNodeType: "cache.r6g.large"
            Engine: "redis"
            EngineVersion: "6.2"
            NumCacheNodes: 1
            PreferredAvailabilityZone: !Sub "${AWS::Region}a"
            PreferredMaintenanceWindow: "fri:05:30-fri:06:50"
            CacheParameterGroupName: "default.redis6.x"
            CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
            AutoMinorVersionUpgrade: true
            VpcSecurityGroupIds: 
              - !Ref ElasticSG
            SnapshotRetentionLimit: 0
            SnapshotWindow: "01:30-02:30"
            ClusterName: "ElastiCache1-Redis-ac3"

# DynamoDB 테이블 생성
  DynamoDBTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            AttributeDefinitions: 
              - 
                AttributeName: "id"
                AttributeType: "S"
            TableName: "DynamoDB-ap-northeast-2"
            KeySchema: 
              - 
                AttributeName: "id"
                KeyType: "HASH"
            ProvisionedThroughput: 
                ReadCapacityUnits: 5
                WriteCapacityUnits: 5

  # MediaConvert 
  Logs6819BB44:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: Logs bucket does not require logging configuration
          - id: W51
            reason: Logs bucket is private and does not require a bucket policy
  Source71E471F1:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref Logs6819BB44
        LogFilePrefix: source-bucket-logs/
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W51
            reason: source bucket is private and does not require a bucket policy
  Destination920A3C57:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
            MaxAge: 3000
      LoggingConfiguration:
        DestinationBucketName: !Ref Logs6819BB44
        LogFilePrefix: destination-bucket-logs/
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      'aws:cdk:path': VodFoundation/Destination/Resource
  DestinationPolicy7982387E:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Destination920A3C57
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt 
                - CloudFrontCloudFrontDistributionOrigin1S3Origin17B88F1A
                - S3CanonicalUserId
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - Destination920A3C57
                  - Arn
                - /*
        Version: 2012-10-17
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F16
            reason: Public website bucket policy requires a wildcard principal
  CloudFrontCloudfrontLoggingBucketE23C521E:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: >-
              This S3 bucket is used as the access logging bucket for CloudFront
              Distribution
  CloudFrontCloudfrontLoggingBucketPolicyD60AA01A:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CloudFrontCloudfrontLoggingBucketE23C521E
      PolicyDocument:
        Statement:
          - Action: '*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'
            Effect: Deny
            Principal: '*'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - CloudFrontCloudfrontLoggingBucketE23C521E
                  - Arn
                - /*
            Sid: HttpsOnly
        Version: 2012-10-17
    Metadata:
      'aws:cdk:path': VodFoundation/CloudFront/CloudfrontLoggingBucket/Policy/Resource
  CloudFrontCloudFrontDistributionOrigin1S3Origin17B88F1A:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: >-
          Identity for
          VodFoundationCloudFrontCloudFrontDistributionOrigin1F191A578
    Metadata:
      'aws:cdk:path': >-
        VodFoundation/CloudFront/CloudFrontDistribution/Origin1/S3Origin/Resource
  CloudFrontCloudFrontDistribution824F3346:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: !Join 
          - ''
          - - !Ref 'AWS::StackName'
            - ' Video on Demand Foundation'
        DefaultCacheBehavior:
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Compress: true
          TargetOriginId: VodFoundationCloudFrontCloudFrontDistributionOrigin1F191A578
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          Bucket: !GetAtt 
            - CloudFrontCloudfrontLoggingBucketE23C521E
            - RegionalDomainName
        Origins:
          - DomainName: !GetAtt 
              - Destination920A3C57
              - RegionalDomainName
            Id: VodFoundationCloudFrontCloudFrontDistributionOrigin1F191A578
            S3OriginConfig:
              OriginAccessIdentity: !Join 
                - ''
                - - origin-access-identity/cloudfront/
                  - !Ref CloudFrontCloudFrontDistributionOrigin1S3Origin17B88F1A
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W70
            reason: >-
              Since the distribution uses the CloudFront domain name, CloudFront
              automatically sets the security policy to TLSv1 regardless of the
              value of MinimumProtocolVersion
  MediaConvertRole031A64A9:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: mediaconvert.amazonaws.com
        Version: 2012-10-17
    Metadata:
      'aws:cdk:path': VodFoundation/MediaConvertRole/Resource
  MediaconvertPolicy9E3026EC:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - !GetAtt 
                    - Source71E471F1
                    - Arn
                  - /*
              - !Join 
                - ''
                - - !GetAtt 
                    - Destination920A3C57
                    - Arn
                  - /*
          - Action: 'execute-api:Invoke'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':execute-api:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*'
        Version: 2012-10-17
      PolicyName: MediaconvertPolicy9E3026EC
      Roles:
        - !Ref MediaConvertRole031A64A9
    Metadata:
      'aws:cdk:path': VodFoundation/MediaconvertPolicy/Resource
  CustomResourceServiceRoleE774390D:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    Metadata:
      'aws:cdk:path': VodFoundation/CustomResource/ServiceRole/Resource
  CustomResourceServiceRoleDefaultPolicy62213138:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 's3:PutObject'
              - 's3:PutBucketNotification'
            Effect: Allow
            Resource:
              - !GetAtt 
                - Source71E471F1
                - Arn
              - !Join 
                - ''
                - - !GetAtt 
                    - Source71E471F1
                    - Arn
                  - /*
          - Action: 'mediaconvert:DescribeEndpoints'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:aws:mediaconvert:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*'
        Version: 2012-10-17
      PolicyName: CustomResourceServiceRoleDefaultPolicy62213138
      Roles:
        - !Ref CustomResourceServiceRoleE774390D
    Metadata:
      'aws:cdk:path': VodFoundation/CustomResource/ServiceRole/DefaultPolicy/Resource
  CustomResource8CDCD7A7:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Sub 'solutions-${AWS::Region}'
        S3Key: >-
          video-on-demand-on-aws-foundation/v1.1.0/asset2bd7f95c3e5e8fd3883dadd70adcdb14c0f67bc3bbbe8be478beef5dd78a2ae6.zip
      Role: !GetAtt 
        - CustomResourceServiceRoleE774390D
        - Arn
      Description: >-
        CFN Custom resource to copy assets to S3 and get the MediaConvert
        endpoint
      Environment:
        Variables:
          SOLUTION_IDENTIFIER: AwsSolution/SO0146/v1.1.0
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 30
    DependsOn:
      - CustomResourceServiceRoleDefaultPolicy62213138
      - CustomResourceServiceRoleE774390D
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: 'Invalid warning: function has access to cloudwatch'
          - id: W89
            reason: AWS Lambda does not require VPC for this solution.
          - id: W92
            reason: ReservedConcurrentExecutions not required
  Endpoint:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt 
        - CustomResource8CDCD7A7
        - Arn
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      'aws:cdk:path': VodFoundation/Endpoint/Default
  jobSubmitServiceRole829286B1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    Metadata:
      'aws:cdk:path': VodFoundation/jobSubmit/ServiceRole/Resource
  jobSubmitServiceRoleDefaultPolicyEC39C00E:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action: 'iam:PassRole'
            Effect: Allow
            Resource: !GetAtt 
              - MediaConvertRole031A64A9
              - Arn
          - Action: 'mediaconvert:CreateJob'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':mediaconvert:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*'
          - Action: 's3:GetObject'
            Effect: Allow
            Resource:
              - !GetAtt 
                - Source71E471F1
                - Arn
              - !Join 
                - ''
                - - !GetAtt 
                    - Source71E471F1
                    - Arn
                  - /*
          - Action: 'sns:Publish'
            Effect: Allow
            Resource: !Ref NotificationSnsTopicB941FD22
        Version: 2012-10-17
      PolicyName: jobSubmitServiceRoleDefaultPolicyEC39C00E
      Roles:
        - !Ref jobSubmitServiceRole829286B1
    Metadata:
      'aws:cdk:path': VodFoundation/jobSubmit/ServiceRole/DefaultPolicy/Resource
  jobSubmitB391E42F:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Sub 'solutions-${AWS::Region}'
        S3Key: >-
          video-on-demand-on-aws-foundation/v1.1.0/asset4c6b58d49775af65e43794635d2357ef117babc689af2d60c7838caf0ab3f3de.zip
      Role: !GetAtt 
        - jobSubmitServiceRole829286B1
        - Arn
      Description: Submits an Encoding job to MediaConvert
      Environment:
        Variables:
          MEDIACONVERT_ENDPOINT: !GetAtt 
            - Endpoint
            - Endpoint
          MEDIACONVERT_ROLE: !GetAtt 
            - MediaConvertRole031A64A9
            - Arn
          JOB_SETTINGS: job-settings.json
          DESTINATION_BUCKET: !Ref Destination920A3C57
          SOLUTION_ID: SO0146
          STACKNAME: !Ref 'AWS::StackName'
          SOLUTION_IDENTIFIER: AwsSolution/SO0146/v1.1.0
          SNS_TOPIC_ARN: !Ref NotificationSnsTopicB941FD22
          SNS_TOPIC_NAME: !GetAtt 
            - NotificationSnsTopicB941FD22
            - TopicName
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 30
    DependsOn:
      - jobSubmitServiceRoleDefaultPolicyEC39C00E
      - jobSubmitServiceRole829286B1
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: 'Invalid warning: function has access to cloudwatch'
          - id: W89
            reason: AWS Lambda does not require VPC for this solution.
          - id: W92
            reason: ReservedConcurrentExecutions not required
  jobSubmitEventInvokeConfig0385F502:
    Type: 'AWS::Lambda::EventInvokeConfig'
    Properties:
      FunctionName: !Ref jobSubmitB391E42F
      Qualifier: $LATEST
      MaximumRetryAttempts: 0
    Metadata:
      'aws:cdk:path': VodFoundation/jobSubmit/EventInvokeConfig/Resource
  jobSubmitS3Trigger3DEB8D7C:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 
        - jobSubmitB391E42F
        - Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
    Metadata:
      'aws:cdk:path': VodFoundation/jobSubmit/S3Trigger
  JobCompleteServiceRole2855C268:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    Metadata:
      'aws:cdk:path': VodFoundation/JobComplete/ServiceRole/Resource
  JobCompleteServiceRoleDefaultPolicy686BE0F5:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action: 'mediaconvert:GetJob'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':mediaconvert:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*'
          - Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Effect: Allow
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - Source71E471F1
                  - Arn
                - /*
          - Action: 'sns:Publish'
            Effect: Allow
            Resource: !Ref NotificationSnsTopicB941FD22
        Version: 2012-10-17
      PolicyName: JobCompleteServiceRoleDefaultPolicy686BE0F5
      Roles:
        - !Ref JobCompleteServiceRole2855C268
    Metadata:
      'aws:cdk:path': VodFoundation/JobComplete/ServiceRole/DefaultPolicy/Resource
  JobComplete703682D0:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Sub 'solutions-${AWS::Region}'
        S3Key: >-
          video-on-demand-on-aws-foundation/v1.1.0/asset2030979b01f18577476da5df8ca758912810df394a1bd22127da4e1807693998.zip
      Role: !GetAtt 
        - JobCompleteServiceRole2855C268
        - Arn
      Description: 'Triggered by Cloudwatch Events,processes completed MediaConvert jobs.'
      Environment:
        Variables:
          MEDIACONVERT_ENDPOINT: !GetAtt 
            - Endpoint
            - Endpoint
          CLOUDFRONT_DOMAIN: !GetAtt 
            - CloudFrontCloudFrontDistribution824F3346
            - DomainName
          SOURCE_BUCKET: !Ref Source71E471F1
          JOB_MANIFEST: jobs-manifest.json
          STACKNAME: !Ref 'AWS::StackName'
          METRICS: !FindInMap 
            - Send
            - AnonymousUsage
            - Data
          SOLUTION_ID: SO0146
          VERSION: 1.1.0
          UUID: !GetAtt 
            - Endpoint
            - UUID
          SOLUTION_IDENTIFIER: AwsSolution/SO0146/v1.1.0
          SNS_TOPIC_ARN: !Ref NotificationSnsTopicB941FD22
          SNS_TOPIC_NAME: !GetAtt 
            - NotificationSnsTopicB941FD22
            - TopicName
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 30
    DependsOn:
      - JobCompleteServiceRoleDefaultPolicy686BE0F5
      - JobCompleteServiceRole2855C268
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: 'Invalid warning: function has access to cloudwatch'
          - id: W89
            reason: AWS Lambda does not require VPC for this solution.
          - id: W92
            reason: ReservedConcurrentExecutions not required
  JobCompleteEventInvokeConfig692D89BE:
    Type: 'AWS::Lambda::EventInvokeConfig'
    Properties:
      FunctionName: !Ref JobComplete703682D0
      Qualifier: $LATEST
      MaximumRetryAttempts: 0
    Metadata:
      'aws:cdk:path': VodFoundation/JobComplete/EventInvokeConfig/Resource
  JobCompleteAwsEventsLambdaInvokePermission1ED79B615:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 
        - JobComplete703682D0
        - Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 
        - EventTriggerEventsRule76A88FDF
        - Arn
    Metadata:
      'aws:cdk:path': VodFoundation/JobComplete/AwsEventsLambdaInvokePermission-1
  S3Config:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt 
        - CustomResource8CDCD7A7
        - Arn
      SourceBucket: !Ref Source71E471F1
      LambdaArn: !GetAtt 
        - jobSubmitB391E42F
        - Arn
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      'aws:cdk:path': VodFoundation/S3Config/Default
  EventTriggerEventsRule76A88FDF:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
          - aws.mediaconvert
        detail:
          userMetadata:
            StackName:
              - !Ref 'AWS::StackName'
          status:
            - COMPLETE
            - ERROR
            - CANCELED
            - INPUT_INFORMATION
      State: ENABLED
      Targets:
        - Arn: !GetAtt 
            - JobComplete703682D0
            - Arn
          Id: Target0
    Metadata:
      'aws:cdk:path': VodFoundation/EventTrigger/EventsRule/Resource
  NotificationSnsTopicB941FD22:
    Type: 'AWS::SNS::Topic'
    Properties:
      KmsMasterKeyId: !Join 
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':kms:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':alias/aws/sns'
    Metadata:
      'aws:cdk:path': VodFoundation/Notification/SnsTopic/Resource
  NotificationSnsTopicPolicy4027082A:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'SNS:Publish'
              - 'SNS:RemovePermission'
              - 'SNS:SetTopicAttributes'
              - 'SNS:DeleteTopic'
              - 'SNS:ListSubscriptionsByTopic'
              - 'SNS:GetTopicAttributes'
              - 'SNS:Receive'
              - 'SNS:AddPermission'
              - 'SNS:Subscribe'
            Condition:
              StringEquals:
                'AWS:SourceOwner': !Ref 'AWS::AccountId'
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Resource: !Ref NotificationSnsTopicB941FD22
            Sid: TopicOwnerOnlyAccess
          - Action:
              - 'SNS:Publish'
              - 'SNS:RemovePermission'
              - 'SNS:SetTopicAttributes'
              - 'SNS:DeleteTopic'
              - 'SNS:ListSubscriptionsByTopic'
              - 'SNS:GetTopicAttributes'
              - 'SNS:Receive'
              - 'SNS:AddPermission'
              - 'SNS:Subscribe'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'
            Effect: Deny
            Principal: '*'
            Resource: !Ref NotificationSnsTopicB941FD22
            Sid: HttpsOnly
        Version: 2012-10-17
      Topics:
        - !Ref NotificationSnsTopicB941FD22
    Metadata:
      'aws:cdk:path': VodFoundation/Notification/SnsTopic/Policy/Resource
  
    Metadata:
      'aws:cdk:path': 'VodFoundation/Notification/SnsTopic/TokenSubscription:1/Resource'
  CDKMetadata:
    Type: 'AWS::CDK::Metadata'
    Properties:
      Analytics: >-
        v2:deflate64:H4sIAAAAAAAAA3VSwW7CMAz9Fu5poKu084ANCWkTCPiBkBoU2iZVnDBNVf99TlJoD9ultl/sl+eX5jzPF3wxexPfmHWyrOadNBZ4d3RCVmx90V+ibZW+hnQvrGjAgWVro9FZLx1bIoKj5mvs8ehMcwA03koII898Cu68a70LGfGUyimjexYFYMG7lZcVxNMhS2FvaiV/RnioU7ESCD2TtfHlxRrtePeuSKA6+0DOdlaRvqWUgLgtQTvlItM6DGzCwH8dU5qeKdHw7mDqtFqIo6qU9awWzbkUvNt4LePldPbMP+5EvdV3UwGtflHR1j/BPdhGIcZrschEsBl5dJtBGEBS4gclFKlLE3QyrZIBS0n8jhqn5dGfUVrVPjRO674nOlPHrTGTj8fGefpLnjZn9F6jhydzLAZtmSVJ2WBF3A+DyJP5jNBgUhYkJ4RmNdKt2pTAbzi/5y88f+X57IZKERs9SAP8kOIvI5symLUCAAA=
    Metadata:
      'aws:cdk:path': VodFoundation/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  SourceBucket:
    Description: >-
      Source S3 Bucket used to host source video and MediaConvert job settings
      files
    Value: !Ref Source71E471F1
    Export:
      Name: !Join 
        - ''
        - - !Ref 'AWS::StackName'
          - '-SourceBucket'
  DestinationBucket:
    Description: Source S3 Bucket used to host all MediaConvert ouputs
    Value: !Ref Destination920A3C57
    Export:
      Name: !Join 
        - ''
        - - !Ref 'AWS::StackName'
          - '-DestinationBucket'
  CloudFrontDomain:
    Description: CloudFront Domain Name
    Value: !GetAtt 
      - CloudFrontCloudFrontDistribution824F3346
      - DomainName
    Export:
      Name: !Join 
        - ''
        - - !Ref 'AWS::StackName'
          - '-CloudFrontDomain'
  SnsTopic:
    Description: SNS Topic used to capture the VOD workflow outputs including errors
    Value: !GetAtt 
      - NotificationSnsTopicB941FD22
      - TopicName
    Export:
      Name: !Join 
        - ''
        - - !Ref 'AWS::StackName'
          - '-SnsTopic'
Conditions:
  CDKMetadataAvailable: !Or 
    - !Or 
      - !Equals 
        - !Ref 'AWS::Region'
        - af-south-1
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-east-1
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-northeast-1
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-northeast-2
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-south-1
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-southeast-1
      - !Equals 
        - !Ref 'AWS::Region'
        - ap-southeast-2
      - !Equals 
        - !Ref 'AWS::Region'
        - ca-central-1
      - !Equals 
        - !Ref 'AWS::Region'
        - cn-north-1
      - !Equals 
        - !Ref 'AWS::Region'
        - cn-northwest-1
    - !Or 
      - !Equals 
        - !Ref 'AWS::Region'
        - eu-central-1
      - !Equals 
        - !Ref 'AWS::Region'
        - eu-north-1
      - !Equals 
        - !Ref 'AWS::Region'
        - eu-south-1
      - !Equals 
        - !Ref 'AWS::Region'
        - eu-west-1
      - !Equals 
        - !Ref 'AWS::Region'
        - eu-west-2
      - !Equals 
        - !Ref 'AWS::Region'
        - eu-west-3
      - !Equals 
        - !Ref 'AWS::Region'
        - me-south-1
      - !Equals 
        - !Ref 'AWS::Region'
        - sa-east-1
      - !Equals 
        - !Ref 'AWS::Region'
        - us-east-1
      - !Equals 
        - !Ref 'AWS::Region'
        - us-east-2
    - !Or 
      - !Equals 
        - !Ref 'AWS::Region'
        - us-west-1
      - !Equals 
        - !Ref 'AWS::Region'
        - us-west-2

  